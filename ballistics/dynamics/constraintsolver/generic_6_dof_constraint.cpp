/* Generated by Cython 0.13 on Sun Mar 27 14:03:18 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif

#ifndef PySet_CheckExact
#  define PySet_CheckExact(obj)          (Py_TYPE(obj) == &PySet_Type)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__ballistics__dynamics__constraintsolver__generic_6_dof_constraint
#include "BulletDynamics/ConstraintSolver/btTypedConstraint.h"
#include "LinearMath/btScalar.h"
#include "LinearMath/btVector3.h"
#include "LinearMath/btQuaternion.h"
#include "LinearMath/btMatrix3x3.h"
#include "LinearMath/btTransform.h"
#include "LinearMath/btMotionState.h"
#include "LinearMath/btDefaultMotionState.h"
#include "bstx_motion_state.h"
#include "BulletCollision/CollisionShapes/btCollisionShape.h"
#include "BulletDynamics/Dynamics/btRigidBody.h"
#include "BulletDynamics/ConstraintSolver/btGeneric6DofConstraint.h"

/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE 
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__)) 
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__)) 
# else
#   define CYTHON_UNUSED 
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "generic_6_dof_constraint.pyx",
  "rigid_body.pxd",
  "vector3.pxd",
  "quaternion.pxd",
  "matrix3x3.pxd",
  "transform.pxd",
  "motion_state.pxd",
  "base.pxd",
};

/* Type declarations */

/* "/home/flupke/source/ballistics/ballistics/linearmath/transform.pxd":38
 * 
 * 
 * cdef public api class Transform[type BstxTransformType, object BstxTransform]:             # <<<<<<<<<<<<<<
 * 
 *     cdef btTransform *wrapped
 */

struct BstxTransform {
  PyObject_HEAD
  btTransform *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/linearmath/matrix3x3.pxd":47
 * 
 * 
 * cdef class Matrix3x3:             # <<<<<<<<<<<<<<
 * 
 *     cdef btMatrix3x3 *wrapped
 */

struct __pyx_obj_10ballistics_10linearmath_9matrix3x3_Matrix3x3 {
  PyObject_HEAD
  btMatrix3x3 *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/dynamics/rigid_body.pxd":28
 * 
 * 
 * cdef class RigidBodyConstructionInfo:             # <<<<<<<<<<<<<<
 * 
 *     cdef btRigidBodyConstructionInfo *wrapped
 */

struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo {
  PyObject_HEAD
  btRigidBody::btRigidBodyConstructionInfo *wrapped;
  struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState *motionState;
  PyObject *collisionShape;
  PyObject *localInertia;
};

/* "/home/flupke/source/ballistics/ballistics/linearmath/motion_state.pxd":35
 * 
 * 
 * cdef class MotionState:             # <<<<<<<<<<<<<<
 * 
 *     cdef btMotionState *wrapped
 */

struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState {
  PyObject_HEAD
  btMotionState *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/typed_constraint.pxd":7
 * 
 * 
 * cdef class TypedConstraint:             # <<<<<<<<<<<<<<
 * 
 *     cdef btTypedConstraint *wrapped
 */

struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint {
  PyObject_HEAD
  btTypedConstraint *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pxd":44
 * 
 * 
 * cdef class Generic6DofConstraint(TypedConstraint):             # <<<<<<<<<<<<<<
 * 
 *     pass
 */

struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint {
  struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint __pyx_base;
};

struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3 {
  PyObject_HEAD
  btVector3 *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/linearmath/quaternion.pxd":41
 * 
 * 
 * cdef class Quaternion:             # <<<<<<<<<<<<<<
 * 
 *     cdef btQuaternion *wrapped
 */

struct __pyx_obj_10ballistics_10linearmath_10quaternion_Quaternion {
  PyObject_HEAD
  btQuaternion *wrapped;
};

/* "/home/flupke/source/ballistics/ballistics/linearmath/motion_state.pxd":40
 * 
 * 
 * cdef class DefaultMotionState(MotionState):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_obj_10ballistics_10linearmath_12motion_state_DefaultMotionState {
  struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState __pyx_base;
};

/* "/home/flupke/source/ballistics/ballistics/linearmath/motion_state.pxd":44
 * 
 * 
 * cdef class BallisticsMotionState(MotionState):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_obj_10ballistics_10linearmath_12motion_state_BallisticsMotionState {
  struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState __pyx_base;
};

/* "/home/flupke/source/ballistics/ballistics/dynamics/rigid_body.pxd":36
 * 
 * 
 * cdef class RigidBody:             # <<<<<<<<<<<<<<
 * 
 *     cdef btRigidBody *wrapped
 */

struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody {
  PyObject_HEAD
  btRigidBody *wrapped;
  PyObject *constructionInfo;
};

/* "/home/flupke/source/ballistics/ballistics/collision/shapes/base.pxd":11
 * 
 * 
 * cdef class CollisionShape:             # <<<<<<<<<<<<<<
 * 
 *     cdef btCollisionShape *wrapped
 */

struct __pyx_obj_10ballistics_9collision_6shapes_4base_CollisionShape {
  PyObject_HEAD
  btCollisionShape *wrapped;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from ballistics.dynamics.constraintsolver.typed_constraint */

static PyTypeObject *__pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint = 0;
/* Module declarations from ballistics.linearmath.common */

/* Module declarations from ballistics.linearmath.vector3 */

static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_7vector3_Vector3 = 0;
static PyObject *(*__pyx_f_10ballistics_10linearmath_7vector3_wrap_vector3)(btVector3); /*proto*/
/* Module declarations from ballistics.linearmath.quaternion */

static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_10quaternion_Quaternion = 0;
static PyObject *(*__pyx_f_10ballistics_10linearmath_10quaternion_wrap_quaternion)(btQuaternion); /*proto*/
/* Module declarations from ballistics.linearmath.matrix3x3 */

static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_9matrix3x3_Matrix3x3 = 0;
static PyObject *(*__pyx_f_10ballistics_10linearmath_9matrix3x3_wrap_matrix3x3)(btMatrix3x3); /*proto*/
/* Module declarations from ballistics.linearmath.transform */

static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_9transform_Transform = 0;
static PyObject *(*wrap_transform)(btTransform); /*proto*/
/* Module declarations from cpython.ref */

/* Module declarations from ballistics.linearmath.motion_state */

static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_12motion_state_MotionState = 0;
static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_12motion_state_DefaultMotionState = 0;
static PyTypeObject *__pyx_ptype_10ballistics_10linearmath_12motion_state_BallisticsMotionState = 0;
static PyObject *(*__pyx_f_10ballistics_10linearmath_12motion_state_wrap_default_motion_state)(btDefaultMotionState *); /*proto*/
/* Module declarations from ballistics.collision.shapes.base */

static PyTypeObject *__pyx_ptype_10ballistics_9collision_6shapes_4base_CollisionShape = 0;
/* Module declarations from ballistics.dynamics.rigid_body */

static PyTypeObject *__pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo = 0;
static PyTypeObject *__pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody = 0;
/* Module declarations from ballistics.dynamics.constraintsolver.generic_6_dof_constraint */

static PyTypeObject *__pyx_ptype_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint = 0;
#define __Pyx_MODULE_NAME "ballistics.dynamics.constraintsolver.generic_6_dof_constraint"
int __pyx_module_is_main_ballistics__dynamics__constraintsolver__generic_6_dof_constraint = 0;

/* Implementation of ballistics.dynamics.constraintsolver.generic_6_dof_constraint */
static PyObject *__pyx_builtin_TypeError;
static char __pyx_k_1[] = "the constructor takes either 3 or 5 arguments";
static char __pyx_k_2[] = "this method takes either 2 or 0 arguments";
static char __pyx_k_3[] = "getCalculatedTransformA";
static char __pyx_k_4[] = "getCalculatedTransformB";
static char __pyx_k_5[] = "getRelativePivotPosition";
static char __pyx_k_6[] = "testAngularLimitMotor";
static char __pyx_k_7[] = "setAngularUpperLimit";
static char __pyx_k_8[] = "Generic6DofConstraint.calculateTransforms (line 38)";
static char __pyx_k_9[] = "Generic6DofConstraint";
static char __pyx_k_10[] = "Generic6DofConstraint.getCalculatedTransformA (line 52)";
static char __pyx_k_11[] = "Generic6DofConstraint.getCalculatedTransformB (line 59)";
static char __pyx_k_12[] = "Generic6DofConstraint.buildJacobian (line 74)";
static char __pyx_k_13[] = "Generic6DofConstraint.getAxis (line 83)";
static char __pyx_k_14[] = "Generic6DofConstraint.getAngle (line 90)";
static char __pyx_k_15[] = "Generic6DofConstraint.getRelativePivotPosition (line 96)";
static char __pyx_k_16[] = "Generic6DofConstraint.testAngularLimitMotor (line 103)";
static char __pyx_k_17[] = "Generic6DofConstraint.isLimited (line 139)";
static char __pyx_k_18[] = "Generic6DofConstraint.setParam (line 155)";
static char __pyx_k_19[] = "Generic6DofConstraint.getParam (line 162)";
static char __pyx_k__hi[] = "hi";
static char __pyx_k__lo[] = "lo";
static char __pyx_k__num[] = "num";
static char __pyx_k__axis[] = "axis";
static char __pyx_k__value[] = "value";
static char __pyx_k__getAxis[] = "getAxis";
static char __pyx_k__wrapped[] = "wrapped";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__getAngle[] = "getAngle";
static char __pyx_k__getParam[] = "getParam";
static char __pyx_k__setLimit[] = "setLimit";
static char __pyx_k__setParam[] = "setParam";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__isLimited[] = "isLimited";
static char __pyx_k__updateRHS[] = "updateRHS";
static char __pyx_k__motionState[] = "motionState";
static char __pyx_k__buildJacobian[] = "buildJacobian";
static char __pyx_k__calcAnchorPos[] = "calcAnchorPos";
static char __pyx_k__getFrameOffsetA[] = "getFrameOffsetA";
static char __pyx_k__getFrameOffsetB[] = "getFrameOffsetB";
static char __pyx_k__getUseFrameOffset[] = "getUseFrameOffset";
static char __pyx_k__setUseFrameOffset[] = "setUseFrameOffset";
static char __pyx_k__calculateTransforms[] = "calculateTransforms";
static char __pyx_k__setLinearLowerLimit[] = "setLinearLowerLimit";
static char __pyx_k__setLinearUpperLimit[] = "setLinearUpperLimit";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_u_10;
static PyObject *__pyx_kp_u_11;
static PyObject *__pyx_kp_u_12;
static PyObject *__pyx_kp_u_13;
static PyObject *__pyx_kp_u_14;
static PyObject *__pyx_kp_u_15;
static PyObject *__pyx_kp_u_16;
static PyObject *__pyx_kp_u_17;
static PyObject *__pyx_kp_u_18;
static PyObject *__pyx_kp_u_19;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_n_s_6;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_kp_u_8;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__axis;
static PyObject *__pyx_n_s__buildJacobian;
static PyObject *__pyx_n_s__calcAnchorPos;
static PyObject *__pyx_n_s__calculateTransforms;
static PyObject *__pyx_n_s__getAngle;
static PyObject *__pyx_n_s__getAxis;
static PyObject *__pyx_n_s__getFrameOffsetA;
static PyObject *__pyx_n_s__getFrameOffsetB;
static PyObject *__pyx_n_s__getParam;
static PyObject *__pyx_n_s__getUseFrameOffset;
static PyObject *__pyx_n_s__hi;
static PyObject *__pyx_n_s__isLimited;
static PyObject *__pyx_n_s__lo;
static PyObject *__pyx_n_s__motionState;
static PyObject *__pyx_n_s__num;
static PyObject *__pyx_n_s__setLimit;
static PyObject *__pyx_n_s__setLinearLowerLimit;
static PyObject *__pyx_n_s__setLinearUpperLimit;
static PyObject *__pyx_n_s__setParam;
static PyObject *__pyx_n_s__setUseFrameOffset;
static PyObject *__pyx_n_s__updateRHS;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__wrapped;
static PyObject *__pyx_int_neg_1;

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":21
 *     """
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef RigidBody rbA, rbB
 *         cdef Transform frameInA, frameInB
 */

static int __pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *__pyx_v_rbA;
  struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *__pyx_v_rbB;
  struct BstxTransform *__pyx_v_frameInA;
  struct BstxTransform *__pyx_v_frameInB;
  PyObject *__pyx_v_useLinearReferenceFrameA;
  PyObject *__pyx_v_useLinearReferenceFrameB;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_rbA = ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_rbB = ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_frameInA = ((struct BstxTransform *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_frameInB = ((struct BstxTransform *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_useLinearReferenceFrameA = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_useLinearReferenceFrameB = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":24
 *         cdef RigidBody rbA, rbB
 *         cdef Transform frameInA, frameInB
 *         self.wrapped = NULL             # <<<<<<<<<<<<<<
 *         if len(args) == 5:
 *             rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA = args
 */
  ((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped = NULL;

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":25
 *         cdef Transform frameInA, frameInB
 *         self.wrapped = NULL
 *         if len(args) == 5:             # <<<<<<<<<<<<<<
 *             rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA = args
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 5);
  if (__pyx_t_2) {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":26
 *         self.wrapped = NULL
 *         if len(args) == 5:
 *             rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA = args             # <<<<<<<<<<<<<<
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 *                     rbA.wrapped[0], rbB.wrapped[0], frameInA.wrapped[0],
 */
    if (likely(((PyObject *)__pyx_v_args) != Py_None) && likely(PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) == 5)) {
      PyObject* tuple = ((PyObject *)__pyx_v_args);
      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 2); __Pyx_INCREF(__pyx_t_5);
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_10ballistics_10linearmath_9transform_Transform))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = PyTuple_GET_ITEM(tuple, 3); __Pyx_INCREF(__pyx_t_6);
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_10ballistics_10linearmath_9transform_Transform))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = PyTuple_GET_ITEM(tuple, 4); __Pyx_INCREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_v_rbA));
      __pyx_v_rbA = ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_rbB));
      __pyx_v_rbB = ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *)__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_frameInA));
      __pyx_v_frameInA = ((struct BstxTransform *)__pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_frameInB));
      __pyx_v_frameInB = ((struct BstxTransform *)__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_useLinearReferenceFrameA);
      __pyx_v_useLinearReferenceFrameA = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_args), 5);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":29
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 *                     rbA.wrapped[0], rbB.wrapped[0], frameInA.wrapped[0],
 *                     frameInB.wrapped[0], useLinearReferenceFrameA)             # <<<<<<<<<<<<<<
 *         elif len(args) == 3:
 *             rbB, frameInB, useLinearReferenceFrameB = args
 */
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_useLinearReferenceFrameA); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":27
 *         if len(args) == 5:
 *             rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA = args
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(             # <<<<<<<<<<<<<<
 *                     rbA.wrapped[0], rbB.wrapped[0], frameInA.wrapped[0],
 *                     frameInB.wrapped[0], useLinearReferenceFrameA)
 */
    ((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped = ((btTypedConstraint *)new btGeneric6DofConstraint((__pyx_v_rbA->wrapped[0]), (__pyx_v_rbB->wrapped[0]), (__pyx_v_frameInA->wrapped[0]), (__pyx_v_frameInB->wrapped[0]), __pyx_t_8));
    goto __pyx_L5;
  }

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":30
 *                     rbA.wrapped[0], rbB.wrapped[0], frameInA.wrapped[0],
 *                     frameInB.wrapped[0], useLinearReferenceFrameA)
 *         elif len(args) == 3:             # <<<<<<<<<<<<<<
 *             rbB, frameInB, useLinearReferenceFrameB = args
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 3);
  if (__pyx_t_2) {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":31
 *                     frameInB.wrapped[0], useLinearReferenceFrameA)
 *         elif len(args) == 3:
 *             rbB, frameInB, useLinearReferenceFrameB = args             # <<<<<<<<<<<<<<
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 *                     rbB.wrapped[0], frameInB.wrapped[0],
 */
    if (likely(((PyObject *)__pyx_v_args) != Py_None) && likely(PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) == 3)) {
      PyObject* tuple = ((PyObject *)__pyx_v_args);
      __pyx_t_7 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_7);
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_6);
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_10ballistics_10linearmath_9transform_Transform))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = PyTuple_GET_ITEM(tuple, 2); __Pyx_INCREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_v_rbB));
      __pyx_v_rbB = ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody *)__pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_frameInB));
      __pyx_v_frameInB = ((struct BstxTransform *)__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_v_useLinearReferenceFrameB);
      __pyx_v_useLinearReferenceFrameB = __pyx_t_5;
      __pyx_t_5 = 0;
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_args), 3);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":34
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(
 *                     rbB.wrapped[0], frameInB.wrapped[0],
 *                     useLinearReferenceFrameB)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("the constructor takes either 3 or 5 arguments")
 */
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_useLinearReferenceFrameB); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":32
 *         elif len(args) == 3:
 *             rbB, frameInB, useLinearReferenceFrameB = args
 *             self.wrapped = <btTypedConstraint*> new btGeneric6DofConstraint(             # <<<<<<<<<<<<<<
 *                     rbB.wrapped[0], frameInB.wrapped[0],
 *                     useLinearReferenceFrameB)
 */
    ((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped = ((btTypedConstraint *)new btGeneric6DofConstraint((__pyx_v_rbB->wrapped[0]), (__pyx_v_frameInB->wrapped[0]), __pyx_t_8));
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":36
 *                     useLinearReferenceFrameB)
 *         else:
 *             raise TypeError("the constructor takes either 3 or 5 arguments")             # <<<<<<<<<<<<<<
 * 
 *     def calculateTransforms(self, *args):
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_kp_s_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
    __pyx_t_6 = PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF((PyObject *)__pyx_v_rbA);
  __Pyx_DECREF((PyObject *)__pyx_v_rbB);
  __Pyx_DECREF((PyObject *)__pyx_v_frameInA);
  __Pyx_DECREF((PyObject *)__pyx_v_frameInB);
  __Pyx_DECREF(__pyx_v_useLinearReferenceFrameA);
  __Pyx_DECREF(__pyx_v_useLinearReferenceFrameB);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":38
 *             raise TypeError("the constructor takes either 3 or 5 arguments")
 * 
 *     def calculateTransforms(self, *args):             # <<<<<<<<<<<<<<
 *         """
 *         Calcs global transform of the offsets.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calculateTransforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calculateTransforms[] = "\n        Calcs global transform of the offsets. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calculateTransforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  struct BstxTransform *__pyx_v_transA;
  struct BstxTransform *__pyx_v_transB;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("calculateTransforms");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "calculateTransforms", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_transA = ((struct BstxTransform *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_transB = ((struct BstxTransform *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":43
 *         """
 *         cdef Transform transA, transB
 *         if len(args) == 2:             # <<<<<<<<<<<<<<
 *             transA, transB = args
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms(
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":44
 *         cdef Transform transA, transB
 *         if len(args) == 2:
 *             transA, transB = args             # <<<<<<<<<<<<<<
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms(
 *                     transA.wrapped[0], transB.wrapped[0])
 */
    if (likely(((PyObject *)__pyx_v_args) != Py_None) && likely(PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) == 2)) {
      PyObject* tuple = ((PyObject *)__pyx_v_args);
      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10ballistics_10linearmath_9transform_Transform))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_10ballistics_10linearmath_9transform_Transform))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_v_transA));
      __pyx_v_transA = ((struct BstxTransform *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_transB));
      __pyx_v_transB = ((struct BstxTransform *)__pyx_t_4);
      __pyx_t_4 = 0;
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_args), 2);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":46
 *             transA, transB = args
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms(
 *                     transA.wrapped[0], transB.wrapped[0])             # <<<<<<<<<<<<<<
 *         elif len(args) == 0:
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms()
 */
    ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->calculateTransforms((__pyx_v_transA->wrapped[0]), (__pyx_v_transB->wrapped[0]));
    goto __pyx_L5;
  }

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":47
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms(
 *                     transA.wrapped[0], transB.wrapped[0])
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms()
 *         else:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":48
 *                     transA.wrapped[0], transB.wrapped[0])
 *         elif len(args) == 0:
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("this method takes either 2 or 0 arguments")
 */
    ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->calculateTransforms();
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":50
 *             (<btGeneric6DofConstraint*>self.wrapped).calculateTransforms()
 *         else:
 *             raise TypeError("this method takes either 2 or 0 arguments")             # <<<<<<<<<<<<<<
 * 
 *     def getCalculatedTransformA(self):
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
    __pyx_t_3 = PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.calculateTransforms");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF((PyObject *)__pyx_v_transA);
  __Pyx_DECREF((PyObject *)__pyx_v_transB);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":52
 *             raise TypeError("this method takes either 2 or 0 arguments")
 * 
 *     def getCalculatedTransformA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Gets the global transform of the offset for body A.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformA[] = "\n        Gets the global transform of the offset for body A. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getCalculatedTransformA");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":56
 *         Gets the global transform of the offset for body A.
 *         """
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)             # <<<<<<<<<<<<<<
 *                 .getCalculatedTransformA())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":57
 *         """
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getCalculatedTransformA())             # <<<<<<<<<<<<<<
 * 
 *     def getCalculatedTransformB(self):
 */
  __pyx_t_1 = wrap_transform(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getCalculatedTransformA()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getCalculatedTransformA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":59
 *                 .getCalculatedTransformA())
 * 
 *     def getCalculatedTransformB(self):             # <<<<<<<<<<<<<<
 *         """
 *         Gets the global transform of the offset for body B.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformB[] = "\n        Gets the global transform of the offset for body B. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getCalculatedTransformB");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":63
 *         Gets the global transform of the offset for body B.
 *         """
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)             # <<<<<<<<<<<<<<
 *                 .getCalculatedTransformB())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":64
 *         """
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getCalculatedTransformB())             # <<<<<<<<<<<<<<
 * 
 *     def getFrameOffsetA(self):
 */
  __pyx_t_1 = wrap_transform(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getCalculatedTransformB()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getCalculatedTransformB");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":66
 *                 .getCalculatedTransformB())
 * 
 *     def getFrameOffsetA(self):             # <<<<<<<<<<<<<<
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getFrameOffsetA())
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getFrameOffsetA");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":67
 * 
 *     def getFrameOffsetA(self):
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)             # <<<<<<<<<<<<<<
 *                 .getFrameOffsetA())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":68
 *     def getFrameOffsetA(self):
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getFrameOffsetA())             # <<<<<<<<<<<<<<
 * 
 *     def getFrameOffsetB(self):
 */
  __pyx_t_1 = wrap_transform(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getFrameOffsetA()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getFrameOffsetA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":70
 *                 .getFrameOffsetA())
 * 
 *     def getFrameOffsetB(self):             # <<<<<<<<<<<<<<
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getFrameOffsetB())
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getFrameOffsetB");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":71
 * 
 *     def getFrameOffsetB(self):
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)             # <<<<<<<<<<<<<<
 *                 .getFrameOffsetB())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":72
 *     def getFrameOffsetB(self):
 *         return wrap_transform((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getFrameOffsetB())             # <<<<<<<<<<<<<<
 * 
 *     def buildJacobian(self):
 */
  __pyx_t_1 = wrap_transform(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getFrameOffsetB()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getFrameOffsetB");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":74
 *                 .getFrameOffsetB())
 * 
 *     def buildJacobian(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs Jacobian calculation, and also calculates angle differences and axis
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_buildJacobian(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_buildJacobian[] = "\n        performs Jacobian calculation, and also calculates angle differences and axis \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_buildJacobian(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("buildJacobian");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":78
 *         performs Jacobian calculation, and also calculates angle differences and axis
 *         """
 *         (<btGeneric6DofConstraint*>self.wrapped).buildJacobian()             # <<<<<<<<<<<<<<
 * 
 *     def updateRHS(self, timeStep):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->buildJacobian();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":80
 *         (<btGeneric6DofConstraint*>self.wrapped).buildJacobian()
 * 
 *     def updateRHS(self, timeStep):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped).updateRHS(timeStep)
 * 
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_updateRHS(PyObject *__pyx_v_self, PyObject *__pyx_v_timeStep); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_updateRHS(PyObject *__pyx_v_self, PyObject *__pyx_v_timeStep) {
  PyObject *__pyx_r = NULL;
  btScalar __pyx_t_1;
  __Pyx_RefNannySetupContext("updateRHS");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":81
 * 
 *     def updateRHS(self, timeStep):
 *         (<btGeneric6DofConstraint*>self.wrapped).updateRHS(timeStep)             # <<<<<<<<<<<<<<
 * 
 *     def getAxis(self, axis_index):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_timeStep); if (unlikely((__pyx_t_1 == (btScalar)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->updateRHS(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.updateRHS");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":83
 *         (<btGeneric6DofConstraint*>self.wrapped).updateRHS(timeStep)
 * 
 *     def getAxis(self, axis_index):             # <<<<<<<<<<<<<<
 *         """
 *         Get the rotation axis in global coordinates.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAxis(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAxis[] = "\n        Get the rotation axis in global coordinates. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAxis(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getAxis");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":87
 *         Get the rotation axis in global coordinates.
 *         """
 *         return wrap_vector3((<btGeneric6DofConstraint*>self.wrapped)             # <<<<<<<<<<<<<<
 *                 .getAxis(axis_index))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":88
 *         """
 *         return wrap_vector3((<btGeneric6DofConstraint*>self.wrapped)
 *                 .getAxis(axis_index))             # <<<<<<<<<<<<<<
 * 
 *     def getAngle(self, axis_index):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_axis_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_f_10ballistics_10linearmath_7vector3_wrap_vector3(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getAxis(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getAxis");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":90
 *                 .getAxis(axis_index))
 * 
 *     def getAngle(self, axis_index):             # <<<<<<<<<<<<<<
 *         """
 *         Get the relative Euler angle.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAngle(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAngle[] = "\n        Get the relative Euler angle. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAngle(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getAngle");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":94
 *         Get the relative Euler angle.
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped).getAngle(axis_index)             # <<<<<<<<<<<<<<
 * 
 *     def getRelativePivotPosition(self, axis_index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_axis_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getAngle(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getAngle");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":96
 *         return (<btGeneric6DofConstraint*>self.wrapped).getAngle(axis_index)
 * 
 *     def getRelativePivotPosition(self, axis_index):             # <<<<<<<<<<<<<<
 *         """
 *         Get the relative position of theraint pivot.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getRelativePivotPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getRelativePivotPosition[] = "\n        Get the relative position of theraint pivot. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getRelativePivotPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getRelativePivotPosition");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":100
 *         Get the relative position of theraint pivot.
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped) \             # <<<<<<<<<<<<<<
 *                 .getRelativePivotPosition(axis_index)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":101
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .getRelativePivotPosition(axis_index)             # <<<<<<<<<<<<<<
 * 
 *     def testAngularLimitMotor(self, axis_index):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_axis_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getRelativePivotPosition(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getRelativePivotPosition");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":103
 *                 .getRelativePivotPosition(axis_index)
 * 
 *     def testAngularLimitMotor(self, axis_index):             # <<<<<<<<<<<<<<
 *         """
 *         Test angular limit.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_testAngularLimitMotor(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_testAngularLimitMotor[] = "\n        Test angular limit. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_testAngularLimitMotor(PyObject *__pyx_v_self, PyObject *__pyx_v_axis_index) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("testAngularLimitMotor");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":107
 *         Test angular limit.
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped) \             # <<<<<<<<<<<<<<
 *                 .testAngularLimitMotor(axis_index)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":108
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .testAngularLimitMotor(axis_index)             # <<<<<<<<<<<<<<
 * 
 *     def setLinearLowerLimit(self, Vector3 linearLower):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_axis_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->testAngularLimitMotor(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.testAngularLimitMotor");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":110
 *                 .testAngularLimitMotor(axis_index)
 * 
 *     def setLinearLowerLimit(self, Vector3 linearLower):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearLowerLimit(linearLower.wrapped[0])
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearLowerLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_linearLower); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearLowerLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_linearLower) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setLinearLowerLimit");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_linearLower), __pyx_ptype_10ballistics_10linearmath_7vector3_Vector3, 1, "linearLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":112
 *     def setLinearLowerLimit(self, Vector3 linearLower):
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearLowerLimit(linearLower.wrapped[0])             # <<<<<<<<<<<<<<
 * 
 *     def setLinearUpperLimit(self, Vector3 linearUpper):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setLinearLowerLimit((((struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3 *)__pyx_v_linearLower)->wrapped[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setLinearLowerLimit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":114
 *                 .setLinearLowerLimit(linearLower.wrapped[0])
 * 
 *     def setLinearUpperLimit(self, Vector3 linearUpper):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearUpperLimit(linearUpper.wrapped[0])
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearUpperLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_linearUpper); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearUpperLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_linearUpper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setLinearUpperLimit");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_linearUpper), __pyx_ptype_10ballistics_10linearmath_7vector3_Vector3, 1, "linearUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":116
 *     def setLinearUpperLimit(self, Vector3 linearUpper):
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearUpperLimit(linearUpper.wrapped[0])             # <<<<<<<<<<<<<<
 * 
 *     def setAngularLowerLimit(self, Vector3 angularLower):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setLinearUpperLimit((((struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3 *)__pyx_v_linearUpper)->wrapped[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setLinearUpperLimit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":118
 *                 .setLinearUpperLimit(linearUpper.wrapped[0])
 * 
 *     def setAngularLowerLimit(self, Vector3 angularLower):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearLowerLimit(angularLower.wrapped[0])
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularLowerLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_angularLower); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularLowerLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_angularLower) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setAngularLowerLimit");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_angularLower), __pyx_ptype_10ballistics_10linearmath_7vector3_Vector3, 1, "angularLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":120
 *     def setAngularLowerLimit(self, Vector3 angularLower):
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setLinearLowerLimit(angularLower.wrapped[0])             # <<<<<<<<<<<<<<
 * 
 *     def setAngularUpperLimit(self, Vector3 angularUpper):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setLinearLowerLimit((((struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3 *)__pyx_v_angularLower)->wrapped[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setAngularLowerLimit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":122
 *                 .setLinearLowerLimit(angularLower.wrapped[0])
 * 
 *     def setAngularUpperLimit(self, Vector3 angularUpper):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setAngularUpperLimit(angularUpper.wrapped[0])
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularUpperLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_angularUpper); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularUpperLimit(PyObject *__pyx_v_self, PyObject *__pyx_v_angularUpper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("setAngularUpperLimit");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_angularUpper), __pyx_ptype_10ballistics_10linearmath_7vector3_Vector3, 1, "angularUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":124
 *     def setAngularUpperLimit(self, Vector3 angularUpper):
 *         (<btGeneric6DofConstraint*>self.wrapped) \
 *                 .setAngularUpperLimit(angularUpper.wrapped[0])             # <<<<<<<<<<<<<<
 * 
 *     #def getRotationalLimitMotor(self, index):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setAngularUpperLimit((((struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3 *)__pyx_v_angularUpper)->wrapped[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setAngularUpperLimit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":136
 *     #   """
 * 
 *     def setLimit(self, axis, lo, hi):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped).setLimit(axis, lo, hi)
 * 
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLimit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLimit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_lo = 0;
  PyObject *__pyx_v_hi = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  btScalar __pyx_t_2;
  btScalar __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__axis,&__pyx_n_s__lo,&__pyx_n_s__hi,0};
  __Pyx_RefNannySetupContext("setLimit");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__axis);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lo);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setLimit", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hi);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setLimit", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setLimit") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_axis = values[0];
    __pyx_v_lo = values[1];
    __pyx_v_hi = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_axis = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_lo = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_hi = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setLimit", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setLimit");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":137
 * 
 *     def setLimit(self, axis, lo, hi):
 *         (<btGeneric6DofConstraint*>self.wrapped).setLimit(axis, lo, hi)             # <<<<<<<<<<<<<<
 * 
 *     def isLimited(self, limitIndex):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_axis); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_lo); if (unlikely((__pyx_t_2 == (btScalar)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_hi); if (unlikely((__pyx_t_3 == (btScalar)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setLimit(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setLimit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":139
 *         (<btGeneric6DofConstraint*>self.wrapped).setLimit(axis, lo, hi)
 * 
 *     def isLimited(self, limitIndex):             # <<<<<<<<<<<<<<
 *         """
 *         Test limit.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_isLimited(PyObject *__pyx_v_self, PyObject *__pyx_v_limitIndex); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_isLimited[] = "\n        Test limit. \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_isLimited(PyObject *__pyx_v_self, PyObject *__pyx_v_limitIndex) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isLimited");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":143
 *         Test limit.
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped).isLimited(limitIndex)             # <<<<<<<<<<<<<<
 * 
 *     def calcAnchorPos(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_limitIndex); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->isLimited(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.isLimited");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":145
 *         return (<btGeneric6DofConstraint*>self.wrapped).isLimited(limitIndex)
 * 
 *     def calcAnchorPos(self):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped).calcAnchorPos()
 * 
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calcAnchorPos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calcAnchorPos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("calcAnchorPos");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":146
 * 
 *     def calcAnchorPos(self):
 *         (<btGeneric6DofConstraint*>self.wrapped).calcAnchorPos()             # <<<<<<<<<<<<<<
 * 
 *     def getUseFrameOffset(self):
 */
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->calcAnchorPos();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":148
 *         (<btGeneric6DofConstraint*>self.wrapped).calcAnchorPos()
 * 
 *     def getUseFrameOffset(self):             # <<<<<<<<<<<<<<
 *         return (<btGeneric6DofConstraint*>self.wrapped).getUseFrameOffset()
 * 
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getUseFrameOffset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getUseFrameOffset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getUseFrameOffset");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":149
 * 
 *     def getUseFrameOffset(self):
 *         return (<btGeneric6DofConstraint*>self.wrapped).getUseFrameOffset()             # <<<<<<<<<<<<<<
 * 
 *     def setUseFrameOffset(self, frameOffsetOnOff):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getUseFrameOffset()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getUseFrameOffset");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":151
 *         return (<btGeneric6DofConstraint*>self.wrapped).getUseFrameOffset()
 * 
 *     def setUseFrameOffset(self, frameOffsetOnOff):             # <<<<<<<<<<<<<<
 *         (<btGeneric6DofConstraint*>self.wrapped).setUseFrameOffset(
 *                 frameOffsetOnOff)
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setUseFrameOffset(PyObject *__pyx_v_self, PyObject *__pyx_v_frameOffsetOnOff); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setUseFrameOffset(PyObject *__pyx_v_self, PyObject *__pyx_v_frameOffsetOnOff) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setUseFrameOffset");

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":153
 *     def setUseFrameOffset(self, frameOffsetOnOff):
 *         (<btGeneric6DofConstraint*>self.wrapped).setUseFrameOffset(
 *                 frameOffsetOnOff)             # <<<<<<<<<<<<<<
 * 
 *     def setParam(self, num, value, axis=-1):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_frameOffsetOnOff); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setUseFrameOffset(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setUseFrameOffset");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":155
 *                 frameOffsetOnOff)
 * 
 *     def setParam(self, num, value, axis=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Override the default global value of a parameter(such as ERP or CFM),
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setParam[] = "\n        Override the default global value of a parameter(such as ERP or CFM),\n        optionally provide the axis(0..5). \n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  btScalar __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__num,&__pyx_n_s__value,&__pyx_n_s__axis,0};
  __Pyx_RefNannySetupContext("setParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_neg_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setParam", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__axis);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_num = values[0];
    __pyx_v_value = values[1];
    __pyx_v_axis = values[2];
  } else {
    __pyx_v_axis = ((PyObject *)__pyx_int_neg_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_axis = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2:
      __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_num = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setParam", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":160
 *         optionally provide the axis(0..5).
 *         """
 *         (<btGeneric6DofConstraint*>self.wrapped).setParam(num, value, axis)             # <<<<<<<<<<<<<<
 * 
 *     def getParam(self, num, axis=-1):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_num); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_2 == (btScalar)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_axis); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->setParam(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.setParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":162
 *         (<btGeneric6DofConstraint*>self.wrapped).setParam(num, value, axis)
 * 
 *     def getParam(self, num, axis=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return the local value of parameter.
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getParam[] = "\n        Return the local value of parameter.\n        ";
static PyObject *__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__num,&__pyx_n_s__axis,0};
  __Pyx_RefNannySetupContext("getParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_neg_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__axis);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_num = values[0];
    __pyx_v_axis = values[1];
  } else {
    __pyx_v_axis = ((PyObject *)__pyx_int_neg_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_axis = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_num = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getParam", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":166
 *         Return the local value of parameter.
 *         """
 *         return (<btGeneric6DofConstraint*>self.wrapped).getParam(num, axis)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_num); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_axis); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyFloat_FromDouble(((btGeneric6DofConstraint *)((struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint *)__pyx_v_self)->__pyx_base.wrapped)->getParam(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint.getParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/flupke/source/ballistics/ballistics/dynamics/rigid_body.pxd":31
 * 
 *     cdef btRigidBodyConstructionInfo *wrapped
 *     cdef public MotionState motionState             # <<<<<<<<<<<<<<
 *     cdef object collisionShape
 *     cdef object localInertia
 */

static PyObject *__pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState));
  __pyx_r = ((PyObject *)((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_10ballistics_10linearmath_12motion_state_MotionState))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState));
  ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState = ((struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState *)__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ballistics.dynamics.rigid_body.RigidBodyConstructionInfo.motionState.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_10ballistics_8dynamics_10rigid_body_25RigidBodyConstructionInfo_11motionState___del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState));
  ((struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo *)__pyx_v_self)->motionState = ((struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState *)Py_None);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint->tp_new(t, a, k);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint(PyObject *o) {
  __pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint->tp_dealloc(o);
}

static PyMethodDef __pyx_methods_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint[] = {
  {__Pyx_NAMESTR("calculateTransforms"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calculateTransforms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calculateTransforms)},
  {__Pyx_NAMESTR("getCalculatedTransformA"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformA, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformA)},
  {__Pyx_NAMESTR("getCalculatedTransformB"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformB, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getCalculatedTransformB)},
  {__Pyx_NAMESTR("getFrameOffsetA"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetA, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFrameOffsetB"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getFrameOffsetB, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("buildJacobian"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_buildJacobian, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_buildJacobian)},
  {__Pyx_NAMESTR("updateRHS"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_updateRHS, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getAxis"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAxis, METH_O, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAxis)},
  {__Pyx_NAMESTR("getAngle"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAngle, METH_O, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getAngle)},
  {__Pyx_NAMESTR("getRelativePivotPosition"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getRelativePivotPosition, METH_O, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getRelativePivotPosition)},
  {__Pyx_NAMESTR("testAngularLimitMotor"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_testAngularLimitMotor, METH_O, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_testAngularLimitMotor)},
  {__Pyx_NAMESTR("setLinearLowerLimit"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearLowerLimit, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setLinearUpperLimit"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLinearUpperLimit, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAngularLowerLimit"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularLowerLimit, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAngularUpperLimit"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setAngularUpperLimit, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setLimit"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setLimit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isLimited"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_isLimited, METH_O, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_isLimited)},
  {__Pyx_NAMESTR("calcAnchorPos"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_calcAnchorPos, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getUseFrameOffset"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getUseFrameOffset, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setUseFrameOffset"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setUseFrameOffset, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setParam"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_setParam)},
  {__Pyx_NAMESTR("getParam"), (PyCFunction)__pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint_getParam)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Generic6DofConstraint = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Generic6DofConstraint = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Generic6DofConstraint = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Generic6DofConstraint = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("ballistics.dynamics.constraintsolver.generic_6_dof_constraint.Generic6DofConstraint"), /*tp_name*/
  sizeof(struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Generic6DofConstraint, /*tp_as_number*/
  &__pyx_tp_as_sequence_Generic6DofConstraint, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Generic6DofConstraint, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Generic6DofConstraint, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("\n    btGeneric6DofConstraint wrapper.\n\n    Constructors:\n        Generic6DofConstraint(RigidBody rbA, RigidBody rbB,\n            Transform frameInA, Transform frameInB, \n            bool useLinearReferenceFrameA)\n        Generic6DofConstraint(RigidBody bB, Transform frameInB,\n            bool useLinearReferenceFrameB)\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_21Generic6DofConstraint___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("generic_6_dof_constraint"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_u_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0, 0},
  {&__pyx_kp_u_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0, 0},
  {&__pyx_kp_u_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0, 0},
  {&__pyx_kp_u_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0, 0},
  {&__pyx_kp_u_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0, 0},
  {&__pyx_kp_u_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0, 0},
  {&__pyx_kp_u_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 1, 0, 0},
  {&__pyx_kp_u_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 1, 0, 0},
  {&__pyx_kp_u_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 1, 0, 0},
  {&__pyx_kp_u_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 1, 0, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_n_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 1},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_kp_u_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0, 0},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__axis, __pyx_k__axis, sizeof(__pyx_k__axis), 0, 0, 1, 1},
  {&__pyx_n_s__buildJacobian, __pyx_k__buildJacobian, sizeof(__pyx_k__buildJacobian), 0, 0, 1, 1},
  {&__pyx_n_s__calcAnchorPos, __pyx_k__calcAnchorPos, sizeof(__pyx_k__calcAnchorPos), 0, 0, 1, 1},
  {&__pyx_n_s__calculateTransforms, __pyx_k__calculateTransforms, sizeof(__pyx_k__calculateTransforms), 0, 0, 1, 1},
  {&__pyx_n_s__getAngle, __pyx_k__getAngle, sizeof(__pyx_k__getAngle), 0, 0, 1, 1},
  {&__pyx_n_s__getAxis, __pyx_k__getAxis, sizeof(__pyx_k__getAxis), 0, 0, 1, 1},
  {&__pyx_n_s__getFrameOffsetA, __pyx_k__getFrameOffsetA, sizeof(__pyx_k__getFrameOffsetA), 0, 0, 1, 1},
  {&__pyx_n_s__getFrameOffsetB, __pyx_k__getFrameOffsetB, sizeof(__pyx_k__getFrameOffsetB), 0, 0, 1, 1},
  {&__pyx_n_s__getParam, __pyx_k__getParam, sizeof(__pyx_k__getParam), 0, 0, 1, 1},
  {&__pyx_n_s__getUseFrameOffset, __pyx_k__getUseFrameOffset, sizeof(__pyx_k__getUseFrameOffset), 0, 0, 1, 1},
  {&__pyx_n_s__hi, __pyx_k__hi, sizeof(__pyx_k__hi), 0, 0, 1, 1},
  {&__pyx_n_s__isLimited, __pyx_k__isLimited, sizeof(__pyx_k__isLimited), 0, 0, 1, 1},
  {&__pyx_n_s__lo, __pyx_k__lo, sizeof(__pyx_k__lo), 0, 0, 1, 1},
  {&__pyx_n_s__motionState, __pyx_k__motionState, sizeof(__pyx_k__motionState), 0, 0, 1, 1},
  {&__pyx_n_s__num, __pyx_k__num, sizeof(__pyx_k__num), 0, 0, 1, 1},
  {&__pyx_n_s__setLimit, __pyx_k__setLimit, sizeof(__pyx_k__setLimit), 0, 0, 1, 1},
  {&__pyx_n_s__setLinearLowerLimit, __pyx_k__setLinearLowerLimit, sizeof(__pyx_k__setLinearLowerLimit), 0, 0, 1, 1},
  {&__pyx_n_s__setLinearUpperLimit, __pyx_k__setLinearUpperLimit, sizeof(__pyx_k__setLinearUpperLimit), 0, 0, 1, 1},
  {&__pyx_n_s__setParam, __pyx_k__setParam, sizeof(__pyx_k__setParam), 0, 0, 1, 1},
  {&__pyx_n_s__setUseFrameOffset, __pyx_k__setUseFrameOffset, sizeof(__pyx_k__setUseFrameOffset), 0, 0, 1, 1},
  {&__pyx_n_s__updateRHS, __pyx_k__updateRHS, sizeof(__pyx_k__updateRHS), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__wrapped, __pyx_k__wrapped, sizeof(__pyx_k__wrapped), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initgeneric_6_dof_constraint(void); /*proto*/
PyMODINIT_FUNC initgeneric_6_dof_constraint(void)
#else
PyMODINIT_FUNC PyInit_generic_6_dof_constraint(void); /*proto*/
PyMODINIT_FUNC PyInit_generic_6_dof_constraint(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_generic_6_dof_constraint(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("generic_6_dof_constraint"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_ballistics__dynamics__constraintsolver__generic_6_dof_constraint) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint = __Pyx_ImportType("ballistics.dynamics.constraintsolver.typed_constraint", "TypedConstraint", sizeof(struct __pyx_obj_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint), 1); if (unlikely(!__pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint.tp_base = __pyx_ptype_10ballistics_8dynamics_16constraintsolver_16typed_constraint_TypedConstraint;
  if (PyType_Ready(&__pyx_type_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Generic6DofConstraint", (PyObject *)&__pyx_type_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint = &__pyx_type_10ballistics_8dynamics_16constraintsolver_24generic_6_dof_constraint_Generic6DofConstraint;
  /*--- Type import code ---*/
  __pyx_ptype_10ballistics_10linearmath_7vector3_Vector3 = __Pyx_ImportType("ballistics.linearmath.vector3", "Vector3", sizeof(struct __pyx_obj_10ballistics_10linearmath_7vector3_Vector3), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_7vector3_Vector3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_10quaternion_Quaternion = __Pyx_ImportType("ballistics.linearmath.quaternion", "Quaternion", sizeof(struct __pyx_obj_10ballistics_10linearmath_10quaternion_Quaternion), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_10quaternion_Quaternion)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_9matrix3x3_Matrix3x3 = __Pyx_ImportType("ballistics.linearmath.matrix3x3", "Matrix3x3", sizeof(struct __pyx_obj_10ballistics_10linearmath_9matrix3x3_Matrix3x3), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_9matrix3x3_Matrix3x3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_9transform_Transform = __Pyx_ImportType("ballistics.linearmath.transform", "Transform", sizeof(struct BstxTransform), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_9transform_Transform)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_12motion_state_MotionState = __Pyx_ImportType("ballistics.linearmath.motion_state", "MotionState", sizeof(struct __pyx_obj_10ballistics_10linearmath_12motion_state_MotionState), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_12motion_state_MotionState)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_12motion_state_DefaultMotionState = __Pyx_ImportType("ballistics.linearmath.motion_state", "DefaultMotionState", sizeof(struct __pyx_obj_10ballistics_10linearmath_12motion_state_DefaultMotionState), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_12motion_state_DefaultMotionState)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_10linearmath_12motion_state_BallisticsMotionState = __Pyx_ImportType("ballistics.linearmath.motion_state", "BallisticsMotionState", sizeof(struct __pyx_obj_10ballistics_10linearmath_12motion_state_BallisticsMotionState), 1); if (unlikely(!__pyx_ptype_10ballistics_10linearmath_12motion_state_BallisticsMotionState)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_9collision_6shapes_4base_CollisionShape = __Pyx_ImportType("ballistics.collision.shapes.base", "CollisionShape", sizeof(struct __pyx_obj_10ballistics_9collision_6shapes_4base_CollisionShape), 1); if (unlikely(!__pyx_ptype_10ballistics_9collision_6shapes_4base_CollisionShape)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo = __Pyx_ImportType("ballistics.dynamics.rigid_body", "RigidBodyConstructionInfo", sizeof(struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo), 1); if (unlikely(!__pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBodyConstructionInfo)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody = __Pyx_ImportType("ballistics.dynamics.rigid_body", "RigidBody", sizeof(struct __pyx_obj_10ballistics_8dynamics_10rigid_body_RigidBody), 1); if (unlikely(!__pyx_ptype_10ballistics_8dynamics_10rigid_body_RigidBody)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("ballistics.linearmath.vector3"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "wrap_vector3", (void (**)(void))&__pyx_f_10ballistics_10linearmath_7vector3_wrap_vector3, "PyObject *(btVector3)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("ballistics.linearmath.quaternion"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "wrap_quaternion", (void (**)(void))&__pyx_f_10ballistics_10linearmath_10quaternion_wrap_quaternion, "PyObject *(btQuaternion)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("ballistics.linearmath.matrix3x3"); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_3, "wrap_matrix3x3", (void (**)(void))&__pyx_f_10ballistics_10linearmath_9matrix3x3_wrap_matrix3x3, "PyObject *(btMatrix3x3)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("ballistics.linearmath.transform"); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "wrap_transform", (void (**)(void))&wrap_transform, "PyObject *(btTransform)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_ImportModule("ballistics.linearmath.motion_state"); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_5, "wrap_default_motion_state", (void (**)(void))&__pyx_f_10ballistics_10linearmath_12motion_state_wrap_default_motion_state, "PyObject *(btDefaultMotionState *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  /*--- Execution code ---*/

  /* "/home/flupke/source/ballistics/ballistics/dynamics/constraintsolver/generic_6_dof_constraint.pyx":1
 * from ballistics.dynamics.constraintsolver.typed_constraint cimport TypedConstraint             # <<<<<<<<<<<<<<
 * from ballistics.dynamics.rigid_body cimport RigidBody
 * from ballistics.dynamics.constraintsolver.typed_constraint cimport \
 */
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__calculateTransforms); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_8), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_10), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_11), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__buildJacobian); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_12), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__getAxis); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_13), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__getAngle); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_14), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_15), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_16), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__isLimited); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_17), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__setParam); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_18), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__getParam); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetAttrString(__pyx_t_8, "__doc__"); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_kp_u_19), __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

  /* "/home/flupke/source/ballistics/ballistics/dynamics/rigid_body.pxd":31
 * 
 *     cdef btRigidBodyConstructionInfo *wrapped
 *     cdef public MotionState motionState             # <<<<<<<<<<<<<<
 *     cdef object collisionShape
 *     cdef object localInertia
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    __Pyx_AddTraceback("init ballistics.dynamics.constraintsolver.generic_6_dof_constraint");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ballistics.dynamics.constraintsolver.generic_6_dof_constraint");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
            "too many values to unpack (expected %d)", (int)expected);
        #else
            "too many values to unpack (expected %zd)", expected);
        #endif
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError, 
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning), 
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError, 
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
